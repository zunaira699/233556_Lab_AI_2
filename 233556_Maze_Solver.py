# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wpCMt2IP7y56_JjlAYqKj8FKDOdHPPnH

**Maze Solver Agent**
"""

import heapq
import matplotlib.pyplot as plt
import numpy as np

# --- 1. Maze Data and Constants ---
# 0 = path, 1 = wall, 2 = start, 3 = goal
MAZE = [
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 2, 0, 0, 1, 0, 0, 0, 0, 1],
    [1, 1, 1, 0, 1, 0, 1, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 1, 0, 0, 1],
    [1, 0, 1, 1, 1, 1, 1, 0, 1, 1],
    [1, 0, 0, 0, 1, 0, 0, 0, 0, 1],
    [1, 1, 1, 0, 1, 1, 1, 0, 1, 1],
    [1, 0, 1, 0, 0, 0, 1, 0, 0, 1],
    [1, 0, 1, 1, 1, 0, 1, 1, 3, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
]

# Find start and goal coordinates
START = next((r, c) for r, row in enumerate(MAZE) for c, val in enumerate(row) if val == 2)
GOAL = next((r, c) for r, row in enumerate(MAZE) for c, val in enumerate(row) if val == 3)
ROWS, COLS = len(MAZE), len(MAZE[0])

# --- 2. A* Search Algorithm ---
def heuristic(a, b):
    """Calculates Manhattan distance heuristic."""
    return abs(a[0] - b[0]) + abs(a[1] - b[1])

def a_star_search(maze, start, goal):
    """Finds the optimal path using the A* algorithm."""
    open_set = [(0, start)]  # (f_score, position)
    came_from = {}
    g_score = { (r, c): float('inf') for r in range(ROWS) for c in range(COLS) }
    g_score[start] = 0
    f_score = { (r, c): float('inf') for r in range(ROWS) for c in range(COLS) }
    f_score[start] = heuristic(start, goal)

    while open_set:
        current_f, current = heapq.heappop(open_set)

        if current == goal:
            path = []
            while current in came_from:
                path.append(current)
                current = came_from[current]
            path.append(start)
            return path[::-1] # Reverse path

        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
            neighbor = (current[0] + dr, current[1] + dc)

            if 0 <= neighbor[0] < ROWS and 0 <= neighbor[1] < COLS and maze[neighbor[0]][neighbor[1]] != 1:
                tentative_g_score = g_score[current] + 1
                if tentative_g_score < g_score[neighbor]:
                    came_from[neighbor] = current
                    g_score[neighbor] = tentative_g_score
                    f_score[neighbor] = tentative_g_score + heuristic(neighbor, goal)
                    heapq.heappush(open_set, (f_score[neighbor], neighbor))
    return None # No path found

# --- 3. Visualization with Matplotlib ---
def create_static_visualization(maze, path):
    """Creates a static visualization showing the final path."""
    fig, ax = plt.subplots(figsize=(8, 8))

    # Create a color map for the maze
    color_map = {0: 'white', 1: 'black', 2: 'green', 3: 'red'}
    grid = np.array(maze)

    # Ensure all values in the grid are in the color map
    norm = plt.cm.colors.BoundaryNorm(list(color_map.keys()) + [4], len(color_map))
    cmap = plt.cm.colors.ListedColormap([color_map[c] for c in sorted(color_map.keys())])

    ax.imshow(grid, cmap=cmap, norm=norm)

    # Plot the final path if it exists
    if path:
        y_coords, x_coords = zip(*path)
        ax.plot(x_coords, y_coords, 'o-', color='orange', markersize=8, lw=4) # Path
        ax.plot(START[1], START[0], 'o', color='green', markersize=12) # Start point
        ax.plot(GOAL[1], GOAL[0], 'o', color='red', markersize=12) # End point

        # Add text labels for start and end
        ax.text(START[1], START[0], 'Start', ha='center', va='center', color='black', fontsize=12, fontweight='bold')
        ax.text(GOAL[1], GOAL[0], 'End', ha='center', va='center', color='white', fontsize=12, fontweight='bold')

    ax.set_title('Maze Solver: Final Path')
    ax.set_xticks(np.arange(COLS))
    ax.set_yticks(np.arange(ROWS))
    ax.set_xticklabels([])
    ax.set_yticklabels([])
    ax.grid(which='major', color='gray', linestyle='-', linewidth=1)

    plt.show()

# --- 4. Main Execution ---
if __name__ == "__main__":
    final_path = a_star_search(MAZE, START, GOAL)
    create_static_visualization(MAZE, final_path)