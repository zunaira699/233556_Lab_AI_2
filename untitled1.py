# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18hWJdz45LbaGRveqi8JSqFjh4vUa133m
"""

file = open("notes.txt", "w")

file.write("Welcome to the File Handling Lab!\n")
file.write("This is the first line of text.")

file.close()


print("File created and text written successfully.")

"""**Activity 1:**"""

file = open("notes.txt", "r")

content = file.read()


file.close()


print("File Content:\n", content)

"""**Activity 3**"""

file = open("notes.txt", "a")


file.write("\nThis line was appended later.")


file.close()

print("New line appended successfully.")

"""**Activity 4 **"""

with open("notes.txt", "r") as file:
    for line in file:
        print(line.strip())   # strip() removes extra spaces/newline

"""***Activity 5***"""

try:
    with open("nofile.txt", "r") as f:
        print(f.read())
except FileNotFoundError:
    print("Error: The file does not exist!")

"""**Activity 6**"""

# Activity 6: Handling Multiple Exceptions
try:
    number = int(input("Enter a number: "))
    result = 10 / number
    print("Result:", result)

except ValueError:
    print("Invalid input! Please enter a number.")

except ZeroDivisionError:
    print("Division by zero is not allowed.")

finally:
    print("Operation Completed.")

"""**Activity 7**"""

def file_stats(filename):
    try:
        with open(filename, "r", encoding="utf-8") as f:
            text = f.read()
            lines = text.splitlines()
            words = text.split()
            print(f"Lines: {len(lines)}, Words: {len(words)}, Characters: {len(text)}")
    except FileNotFoundError:
        print("Error: File not found.")


file_stats("big_text.txt")

"""**Activity 8**"""

import os, glob

def merge_text_files(folder, output_file):
    with open(output_file, "w", encoding="utf-8") as outfile:
        for txt_file in glob.glob(os.path.join(folder, "*.txt")):
            try:
                with open(txt_file, "r", encoding="utf-8") as infile:
                    outfile.write(infile.read() + "\n")
            except Exception as e:
                print(f"Skipped {txt_file}: {e}")

merge_text_files("myfolder", "merged_output.txt")

"""**Activity 9**"""

# Activity 9: CSV Reader and Analyzer
import csv

def analyze_csv(file):
    try:
        with open(file, newline='', encoding="utf-8") as f:
            reader = csv.DictReader(f)
            totals, counts = {}, {}
            for row in reader:
                for subject, mark in row.items():
                    if subject != 'Name':
                        try:
                            mark = float(mark)
                            totals[subject] = totals.get(subject, 0) + mark
                            counts[subject] = counts.get(subject, 0) + 1
                        except ValueError:
                            print(f"Invalid mark in row: {row}")
            for subject in totals:
                print(f"{subject}: {totals[subject]/counts[subject]:.2f}")

    except FileNotFoundError:
        print("CSV file not found.")

# Run
analyze_csv("marks.csv")

"""**Activity 10**"""

# Activity 10: JSON Config Loader with Fallback
import json

def load_config(path):
    default_config = {"theme": "light", "autosave": True, "interval": 5}
    try:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError) as e:
        print(f"Config error ({e}), using defaults.")
        return default_config

config = load_config("config.json")
print("Configuration Loaded:", config)

"""**Activity 11**"""

# Activity 11: Transaction Logger with Exception Logging
import logging

# Global logging configuration
logging.basicConfig(
    filename="transactions.log",
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

def transfer(amount, balance):
    try:
        if amount <= 0:
            raise ValueError("Amount must be positive.")
        if amount > balance:
            raise ValueError("Insufficient funds.")
        balance -= amount
        logging.info(f"Transferred {amount}, Remaining balance: {balance}")
        return balance
    except ValueError as e:
        logging.error(f"Transaction failed: {e}")
        print("Transaction Error:", e)
        return balance

# Demo
balance = 500
balance = transfer(200, balance)   # ✅ Success
balance = transfer(1000, balance)  # ❌ Fail (Insufficient funds)

"""**Exercises**"""

# Create the source.txt file
with open("source.txt", "w", encoding="utf-8") as src:
    src.write("This is the content of source.txt\n")
    src.write("This is the second line.")

print("source.txt created successfully.")

"""**Exercise 2**"""

# Exercise 2: Count Words in a File
with open("notes.txt", "r", encoding="utf-8") as f:
    words = f.read().split()
    print("Total words:", len(words))

"""**Question 3**"""

# Exercise 3: Student Marks
filename = input("Enter file name: ")

try:
    with open(filename, "r", encoding="utf-8") as f:
        print("File content:", f.read())
except FileNotFoundError:
    with open(filename, "w", encoding="utf-8") as f:
        f.write("No marks recorded")
    print("File not found. Created new file with default message.")

"""**Exercise 4**"""

# Exercise 4: Safe Division Logger
try:
    a = float(input("Enter first number: "))
    b = float(input("Enter second number: "))
    result = a / b
    with open("division_result.txt", "w", encoding="utf-8") as f:
        f.write(f"Result: {result}\n")
    print("Division successful. Result saved to file.")
except ZeroDivisionError:
    print("Error: Division by zero is not allowed.")
except ValueError:
    print("Error: Invalid input, please enter numbers only.")

"""**Exercise 5**"""

# Exercise 5: Error Email Logger (Simulation Only)
import logging

logging.basicConfig(filename="error_log.txt", level=logging.ERROR)

def risky_operation(x, y):
    try:
        return x / y
    except Exception as e:
        logging.error(f"Operation failed: {e}")
        print("Error logged. (In real system, an email would be sent to admin.)")

risky_operation(10, 0)  # Example error